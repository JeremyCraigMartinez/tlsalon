{"version":3,"sources":["components/home.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Home","react_default","a","createElement","react","className","onClick","id","window","scroll","top","document","getElementById","getBoundingClientRect","left","behavior","style","backgroundColor","App","react_router_dom","src","alt","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAkCeA,EArBF,kBACXC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAOC,QAAS,kBAZnBC,EAYgC,YAX9CC,OAAOC,OAAO,CAEZC,IAAKC,SAASC,eAAeL,GAAIM,wBAAwBH,IACzDI,KAAM,EACNC,SAAU,WALC,IAACR,IAYV,eAEFN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,OAAKI,GAAG,QACNN,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIa,MAAO,CAAEC,gBAAiB,uBAA9B,YACAhB,EAAAC,EAAAC,cAAA,MAAIa,MAAO,CAAEC,gBAAiB,uBAA9B,iBACAhB,EAAAC,EAAAC,cAAA,MAAIa,MAAO,CAAEC,gBAAiB,uBAA9B,yBCLCC,MAdf,WACE,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASe,IAAI,sBAAsBC,IAAI,WACtDpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,MAGrCC,EAAAC,EAAAC,cAAA,iBCHcuB,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASrB,SAASC,eAAe,SDyH3C,kBAAmBqB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6898c62d.chunk.js","sourcesContent":["// @flow strict\n\nimport React, { Fragment } from 'react';\n\nconst scroll = (id: string) => {\n  window.scroll({\n    // $FlowFixMe NOTE(Jeremy): ignore all document/window flow errors\n    top: document.getElementById(id).getBoundingClientRect().top,\n    left: 0,\n    behavior: 'smooth',\n  });\n};\n\nconst Home = () => (\n  <Fragment>\n    <div className='basic-tile'>\n      <p className='link' onClick={() => scroll('info')}>Learn more</p>\n    </div>\n    <div className='scroll-box'>\n      <div id='info'>\n        <table>\n          <thead>\n            <tr>\n              <th style={{ backgroundColor: 'rgb(255, 255, 243)' }}>About us</th>\n              <th style={{ backgroundColor: 'rgb(255, 243, 255)' }}>Information 1</th>\n              <th style={{ backgroundColor: 'rgb(243, 255, 255)' }}>Location stuff</th>\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n  </Fragment>\n);\n\nexport default Home;\n","// @flow strict\n\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/home';\n\nfunction App() {\n  return (\n    <Router>\n      <img className='header' src='/assets/header.jpeg' alt='header' />\n      <div className='main'>\n        <Switch>\n          <Route exact path='/' component={Home} />\n        </Switch>\n      </div>\n      <footer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow strict\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; // $FlowFixMe\nimport * as serviceWorker from './serviceWorker';\n\n// $FlowFixMe\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}